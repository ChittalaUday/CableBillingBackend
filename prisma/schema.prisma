// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Primary: PostgreSQL for production, SQLite for development
datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String    @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  role        String    @default("STAFF")
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdCustomers  Customer[]  @relation("CustomerCreatedBy")
  updatedCustomers  Customer[]  @relation("CustomerUpdatedBy")
  createdBills      Bill[]      @relation("BillCreatedBy")
  handledComplaints Complaint[] @relation("ComplaintHandledBy")
  createdReports    Report[]    @relation("ReportCreatedBy")
  auditLogs         AuditLog[]  @relation("AuditLogUser")

  @@map("users")
}

model Customer {
  id               String    @id @default(cuid())
  accountNo        String    @unique
  customerNumber   String    @unique
  lcoCustomerId    String? // LCO Customer ID
  serialNumber     String? // Equipment serial number
  vcNumber         String? // VC Number
  firstName        String
  lastName         String
  email            String?   @unique
  password         String? // Customer login password (for local auth)
  supabaseUserId   String?   @unique // Supabase Auth User ID
  phone            String    @unique
  address          String
  city             String
  state            String
  zipCode          String
  connectionType   String
  packageType      String
  monthlyRate      Float
  installationDate DateTime
  lastBillDate     DateTime?
  nextBillDate     DateTime?
  status           String    @default("ACTIVE")
  msoShareDue      Float?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdBy        String
  updatedBy        String?

  // Relations
  creator        User                   @relation("CustomerCreatedBy", fields: [createdBy], references: [id])
  updater        User?                  @relation("CustomerUpdatedBy", fields: [updatedBy], references: [id])
  bills          Bill[]                 @relation("CustomerBills")
  payments       Payment[]              @relation("CustomerPayments")
  dueSettlements DueSettlement[]        @relation("CustomerDueSettlements")
  complaints     Complaint[]            @relation("CustomerComplaints")
  transactions   Transaction[]          @relation("CustomerTransactions")
  subscriptions  CustomerSubscription[] @relation("CustomerSubscriptions")

  @@map("customers")
}

model Bill {
  id              String    @id @default(cuid())
  billNumber      String    @unique
  customerId      String
  billDate        DateTime
  dueDate         DateTime
  amount          Float
  previousReading Int
  currentReading  Int
  unitsConsumed   Int
  status          String    @default("PENDING")
  paidAt          DateTime?
  paidAmount      Float?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       String

  // Relations
  customer       Customer        @relation("CustomerBills", fields: [customerId], references: [id])
  creator        User            @relation("BillCreatedBy", fields: [createdBy], references: [id])
  payments       Payment[]       @relation("BillPayments")
  dueSettlements DueSettlement[] @relation("BillDueSettlements")

  @@map("bills")
}

model Payment {
  id            String   @id @default(cuid())
  paymentNumber String   @unique
  customerId    String
  billId        String?
  amount        Float
  paymentMethod String
  paymentDate   DateTime
  transactionId String?
  status        String   @default("COMPLETED")
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer Customer @relation("CustomerPayments", fields: [customerId], references: [id])
  bill     Bill?    @relation("BillPayments", fields: [billId], references: [id])

  @@map("payments")
}

model DueSettlement {
  id              String   @id @default(cuid())
  customerId      String
  billId          String
  originalAmount  Float
  settledAmount   Float
  remainingAmount Float
  settlementDate  DateTime
  status          String   @default("PARTIAL")
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  customer Customer @relation("CustomerDueSettlements", fields: [customerId], references: [id])
  bill     Bill     @relation("BillDueSettlements", fields: [billId], references: [id])

  @@map("due_settlements")
}

model Transaction {
  id                String   @id @default(cuid())
  transactionNumber String   @unique
  customerId        String
  type              String
  amount            Float
  description       String
  transactionDate   DateTime
  status            String   @default("COMPLETED")
  referenceId       String?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  customer Customer @relation("CustomerTransactions", fields: [customerId], references: [id])

  @@map("transactions")
}

model Complaint {
  id              String    @id @default(cuid())
  complaintNumber String    @unique
  customerId      String
  title           String
  description     String
  category        String
  priority        String    @default("MEDIUM")
  status          String    @default("OPEN")
  assignedTo      String?
  resolvedAt      DateTime?
  resolution      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  customer     Customer @relation("CustomerComplaints", fields: [customerId], references: [id])
  assignedUser User?    @relation("ComplaintHandledBy", fields: [assignedTo], references: [id])

  @@map("complaints")
}

model Report {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String
  data        String
  generatedAt DateTime @default(now())
  createdBy   String

  // Relations
  creator User @relation("ReportCreatedBy", fields: [createdBy], references: [id])

  @@map("reports")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  oldValues  String?
  newValues  String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  // Relations
  user User @relation("AuditLogUser", fields: [userId], references: [id])

  @@map("audit_logs")
}

// New models for subscription plans and customer subscriptions
model Plan {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String?
  type           String   @default("BASIC")
  price          Float
  channels       String?
  packageDetails String?
  months         Int      @default(1)
  isPriority     Boolean  @default(false)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  subscriptions CustomerSubscription[] @relation("PlanSubscriptions")

  @@map("plans")
}

model CustomerSubscription {
  id              String    @id @default(cuid())
  customerId      String
  planId          String
  status          String    @default("ACTIVE")
  startDate       DateTime  @default(now())
  endDate         DateTime?
  nextBillingDate DateTime?
  monthlyRate     Float
  isAutoRenew     Boolean   @default(true)
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  customer Customer @relation("CustomerSubscriptions", fields: [customerId], references: [id])
  plan     Plan     @relation("PlanSubscriptions", fields: [planId], references: [id])

  @@unique([customerId, planId])
  @@map("customer_subscriptions")
}

// Enums are not supported in SQLite, using String types instead
